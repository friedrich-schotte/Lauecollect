'	NIH-diffractometer_PP.ab
'	Anfinrud 2019.03.17

' Player-Piano Control of High-Speed Diffractometer via PVT commands
'
' PVT commands are queued in a FIFO buffer of length 16. Use HALT to 
' hold off execution of the PVT commands until a START command is issued.
' To ensure the FIFO buffer is not overwritten, the 14th PVT command 
' automatically triggers a START. Hence, to properly synchronize
' the motion, the START command must be issued before the 14th PVT 
' command is queued in the FIFO buffer. 
'
' In AeroBasic, arrays are indexed from 0 to N, i.e., A(1) has two elements
'
'INCLUDE "PP.abi": Peristaltic Pump Look-up Table -> GLOBAL PP(9,499)
'	The first dimension, specified by PP_index, selects the pumping speed.
'	When PP_index = 0, pump is linear (50 equal steps per 50-step period).
'	When PP_index > 0, pump is nonlinear (N unequal steps per 50-step period).
'	The number of subdivisions per 50 step period is given by:
'		SS_array() AS INTEGER = {50,500,250,100,50,20,10,5,2,1}
'
'INCLUDE "Environment_parameters.abi"
'	GLOBAL A_array() AS DOUBLE = {{}}
'	GLOBAL DT_array() AS DOUBLE = {}
'
'Program Control parameters
'	IGLOBAL(0): setting to 0 initiates orderly exit of this program
'	IGLOBAL(1): setting to 1 Triggers Digital Oscilloscope
'	IGLOBAL(2): PP_index (0: linear; 1-9: nonlinear options)
'	IGLOBAL(3): Verbose Logging (1: ON)
'
'E_index: Environment Index (0: NIH; 1: APS; 2: LCLS)
'E_index is saved in and accessed from non-volatile memory (UserInteger0)
'E_index = GETPARM(UserInteger0)

HEADER
	INCLUDE "Environment_parameters.abi"
	INCLUDE "PP.abi" 
END HEADER

DECLARATIONS
	GLOBAL E_index AS INTEGER
	GLOBAL Z_mid AS DOUBLE
	GLOBAL N_trigger AS INTEGER
	'Nz_array specifies mode-specific pulse separation in DT units
	GLOBAL Nz_array() AS INTEGER = {4,12,24,48,96,24,48,96}
	'Np_array specifies mode-specific period in DT units
	GLOBAL Np_array() AS INTEGER = {276,636,1176,2256,4416,1056,2016,3888}
	
	'Trig() variables
	GLOBAL Pump_Enable AS INTEGER
	GLOBAL N_mode AS INTEGER
	GLOBAL N_delay AS INTEGER
	GLOBAL Volt1 AS DOUBLE
	GLOBAL T_offset AS DOUBLE
	GLOBAL T_shift AS DOUBLE = 0.25
	GLOBAL DT AS DOUBLE
	GLOBAL T_error AS DOUBLE
	GLOBAL N_error AS INTEGER
	GLOBAL N_loop as INTEGER
	
	'PrintLog() variables
	GLOBAL PrintString AS STRING(96) 'max # characters for PRINT is 96	
	GLOBAL Pump_Enable_last AS INTEGER
	GLOBAL N_mode_last AS INTEGER
	GLOBAL N_delay_last AS INTEGER

END DECLARATIONS

PROGRAM
	DIM PumpA_pos AS DOUBLE
	DIM T_error_latch AS DOUBLE
	DIM Volt1_latch AS DOUBLE
	DIM Npp AS INTEGER
	DIM PP_index AS INTEGER
	DIM Ti AS DOUBLE
	DIM T_return AS DOUBLE
	DIM T_return_latch AS DOUBLE
	DIM Nx AS INTEGER
	
	'Write program name in UserString0
	SETPARM UserString0,"NIH-diffractometer_PP.ab"
	
	'Read E_index(Environment index): (0: NIH; 1: APS; 2: LCLS)
	E_index = GETPARM(UserInteger0)

	'Initialize IGLOBAL Interactive Control Parameters
	IGLOBAL(0) = 1 '1: program is running; 0: terminates program
	IGLOBAL(1) = 1 '1 triggers digital oscilloscope one time
	IGLOBAL(2) = 2 '3 sets pump stepsize to ~0.5 uL/stroke
	IGLOBAL(3) = 0 '1 sets logging to Verbose 
	
	PP_index = IGLOBAL(2) '0 is linear; 1-9 is nonlinearPP_index = IGLOBAL(2) '0 is linear; 1-9 is nonlinear	

	'SETGAIN <Axis>, <GainKp>, <GainKi>, <GainKpos>, <GainAff>[, <GainKd1>, <GainKpi>, <GainKp1>, <GainVff>, <GainPff>]
	'SETGAIN X, 160000, 1344, 34.4, 341000,0,0,0,0,0 'NIH 20 Hz
	'SETGAIN X, 182000, 1485, 33.42, 301300,0,0,0,459.6,0 'NIH 25 Hz
	'SETGAIN X, 243400, 2429, 40.89, 336700,0,0,0,459.6,0 'NIH 30 Hz
	'SETGAIN X, 290400, 3861, 54.46, 349400,0,0,0,459.6,0 'NIH 35 Hz
	'SETGAIN X, 326700, 3827, 47.99, 334800,0,0,0,1407,0 'NIH 40 Hz
	'SETGAIN X, 365700, 6179, 69.21, 341700,0,0,0,1407,0 'NIH 45 Hz
	'SETGAIN Y, 141000, 1703, 49.45, 199300,0,0,0,945.5,0 'NIH 30 Hz
	'SETGAIN Y, 195000, 3237, 68, 207200,0,0,0,2912,0 'NIH 40 Hz
	'SETGAIN Y, 249700, 5101, 83.69, 211700,0,0,0,4259,0 'NIH 50 Hz
	'SETGAIN Y, 297000, 6466, 89.16, 207400,0,0,0,1924,0 'NIH 60 Hz
	'SETGAIN Z, 85080, 1866, 89.83, 59450,0,0,0,626,0 'NIH 60 Hz
	'SETGAIN Z, 122600, 3387, 113.1, 63910,0,0,0,1114,0 'NIH 80 Hz
	'SETGAIN Z, 139300, 4107, 120.8, 64230,0,0,0,1056,0 'NIH 90 Hz
	'SETGAIN Z, 171200, 5639, 134.9, 64170,0,0,0,1148,0 'NIH 110 Hz
	'SETGAIN Z, 238400, 7352, 126.3, 45550,0,0,0,0,0 'NIH 210 Hz (calculated)
	'SETGAIN Z, 273400, 7241, 108.5, 45550,0,0,0,0,0 'NIH 240 Hz (calculated)
	'SETGAIN Z, 308400, 6142, 81.57, 45550,0,0,0,0,0 'NIH 270 Hz (calculated)
	IF E_index = 1 THEN 'APS
		'SETGAIN X, 611920, 7046, 47.2, 337851,0,3162,0,0,0 'APS EasyTune [1]
		'SETGAIN X, 326700, 3827, 47.99, 334800,0,0,0,1407,0
		SETGAIN X, 243400, 2429, 40.89, 336700,0,0,0,459.6,0 'NIH 30 Hz
		SETGAIN Y, 396431, 5139, 53.1, 213795,0,5620,0,0,0 'APS EasyTune [1]
		'SETGAIN Z, 166800, 2395, 58.8, 63427,0,562,0,0,0 'APS EasyTune [1]
		SETGAIN Z, 181902, 3392, 76.4, 61291,0,562,0,0,0 'APS EasyTune [2]
		'SETGAIN Z, 185358, 3323, 73.4, 61724,0,562,0,0,0 'APS EasyTune [3]
	ELSE 'NIH, LCLS
		'SETGAIN X, 326700, 3827, 47.99, 334800,0,0,0,1407,0
		'SETGAIN X, 290400, 3861, 54.46, 349400,0,0,0,459.6,0 'NIH 35 Hz
		'SETGAIN X, 243400, 2429, 40.89, 336700,0,0,0,459.6,0 'NIH 30 Hz
		SETGAIN X, 182000, 1485, 33.42, 301300,0,0,0,459.6,0 'NIH 25 Hz
		SETGAIN Y, 195000, 3237, 68, 207200,0,0,0,2912,0
		'SETGAIN Z, 273400, 7241, 108.5, 45550,0,0,0,0,0
		SETGAIN Z, 171200, 5639, 134.9, 64170,0,0,0,1148,0 'NIH 110 Hz
		SETGAIN LZ, 645618, 8110, 51.5, 464278,0,0,0,0,0
	END IF
	
	'Select Environment-dependent parameters
	DT = DT_array(E_index)
	DT = 0.0010126899

	'Number of time steps for return stroke
	N_return = 72 
	
	'Position parameters
	'N_steps = 5+39+2 '5 for LZ offset; 39 for 40 x-ray shots; 2 for acceleration/deceleration
	DZ = -0.50 'The full stroke equals (DZ*N_steps) 
	Z_start = 12.5 'Z_stop - DZ*N_steps 'Stroke starts at this position	
	Z_stop = -10.5 'Stroke stops at this position 
	Z_mid = 0.5*(Z_start + Z_stop) 'mid-point of the stroke
	
	'Initialize conditions
	Zi = Z_stop
	LZi = 0
	Npp = 0
	N_trigger = -1
	N_error = 0
	N_mode_last = -1
	
	Plane 1
	'check for "Motion Active" before executing RECONCILE
	WHILE (PLANESTATUS(0) BAND 1<<0) <> 0 OR (PLANESTATUS(1) BAND 1<<0) <> 0 
		P_status = PLANESTATUS(1)
		DWELL 0.005
	WEND
	RECONCILE Z LZ PumpA
	ABS 'Positions specified in absolute coordinates
	WAIT MODE MOVEDONE	
	LINEAR Z Zi F20
	LINEAR LZ LZi F20
	PumpA_pos = PFBK(PumpA)
	LINEAR PumpA 200*CEIL((PumpA_pos-0.01)/200.0) F100 'Move PumpA to the next largest multiple of 200 before terminating program.	
	HOME PumpA
	PumpA_pos = 0
	
	PVT INIT TIME INC
	VELOCITY ON
	HALT	
	SCOPEBUFFER 800
	SCOPETRIGPERIOD -4	' -4 (-2) corresponds to 4 (2) kHz 
	
	CALL Trig() 'ensures subsequent Trig() starts prior to start bit
	
	WHILE IGLOBAL(0) > 0 'enter IGLOBAL(0) = 0 to exit loop	
		N_trigger = N_trigger + 1
		
		CALL Trig() 'read bit pattern; calculate T_offset
		
		'Change pump speed to default settings when changing mode.
		IF (N_mode <> N_mode_last) THEN
			IF N_mode < 2 THEN
				IGLOBAL(2) = 2 '0.2 steps/stroke for flythru-4 and flythru-12
			ELSEIF N_mode < 8 THEN
				IGLOBAL(2) = 3 '0.5 steps/stroke for other flythru and stepping modes
			END IF
			N_mode_last = N_mode
			IGLOBAL(1) = 1 'trigger Digital Oscilloscope
		END IF
		
		SYNC '36 ms
		
		'Return Stroke
		Nx = Nz_array(N_mode) 'Time between x-ray pulses in units of DT
		LZi = 0.0
		IF N_mode < 5 THEN 'Flythru-4, -12, -24, -48, -96
			ZV = DZ/(Nx*DT)
			LZi = -1.0*ZV*10^(N_delay/8.0-5.0) 'LZ position for L_delay	
			IF LZi > 3 THEN
				LZi = 0 'if displacement exceeds 3 mm (bogus), force to 0
			END IF
		ELSE
			ZV = 0
		END IF

		
		IF Pump_Enable = 1 THEN								
			IF (Npp >= SS_array(PP_index)) OR (PP_index <> IGLOBAL(2)) THEN
				PumpA_pos = 50*FLOOR((PumpA_pos+0.01)/50)+50
				Npp = 1
			ELSE
				PumpA_pos = 50*FLOOR((PumpA_pos+0.01)/50)+PP(PP_index,Npp)
				Npp = Npp + 1
			END IF
			PP_index = IGLOBAL(2)
		END IF
		
		'Move to Z_start 
		T_return = N_return*DT + 43*(DT-0.001) - 0.001*T_offset 'M=43
		Vmax = 1.5*(Z_start-Z_stop)/(T_return*1000) 'mm/ms
		Zi = Z_start
		Ti = T_return
		DOUT X,0,1 'mark time of START command
		CALL PVTD(Zi,ZV,LZi,PumpA_pos,0,Ti)
		'PVT Z Zi,0 LZ LZi,0 PumpA PumpA_pos,0 DOUT X, 0,0 TIME T_return

		SYNC '37 ms
		START
		
		'Set delay to acquire  PCMD(Z) near Z_mid
		REPEAT 40 
			SYNC
		ENDREPEAT '77 ms
		
		T_error = (PCMD(Z) - Z_mid)/Vmax - 0.5*T_offset
		DOUT X,0,1 'mark time of PCMD(Z) command
		DGLOBAL(0) = T_error
		IF ABS(T_error) > 0.5 THEN
			N_error = N_error + 1
			IGLOBAL(4) = N_error
		END IF
		
		IF IGLOBAL(1) = 2 THEN 'Latch values corresponding to Digital Scope Trace
			T_error_latch = T_error
			Volt1_latch = Volt1
			T_return_latch = T_return
			IGLOBAL(1) = 0
		END IF
		
		SYNC '79 ms
		
		IF N_mode < 5 THEN 'Flythru-4, -12, -24, -48, -96
			Ti = 12*DT
			Zi = Zi + 0.5*DZ
			CALL PVTD(Zi,ZV,LZi,PumpA_pos,1,Ti)
			'PVT Z Zi,ZV LZ LZi,0 PumpA PumpA_pos,0 TIME Ti		
			Ti = 45*Nx*DT
			Zi = Zi + 45*DZ
			CALL PVTD(Zi,ZV,LZi,PumpA_pos,0,Ti)
			'PVT Z Zi,ZV LZ LZi,0 PumpA PumpA_pos,0 TIME Ti
			Zi = Zi + 0.5*DZ		
			N_sync = 0
		ELSEIF N_mode > 4 THEN 'Stepping Modes
			Ti = 24*DT
			Zi = Zi + 6.5*DZ
			ZV = 0
			FOR i = 1 TO 40
				CALL PVTD(Zi,ZV,LZi,PumpA_pos,1,Ti)
				'PVT Z Zi,0 LZ LZi,0 PumpA PumpA_pos,0 TIME Ti
				Ti = (Nx-12)*DT
				CALL PVTD(Zi,ZV,LZi,PumpA_pos,0,Ti)
				'PVT Z Zi,0 LZ LZi,0 PumpA PumpA_pos,0 TIME Ti
				Ti = 12*DT
				Zi = Zi + DZ
				REPEAT Nx
					SYNC
				ENDREPEAT
			NEXT i
			Zi = Zi - 0.5*DZ
			N_sync = 40*Nx
		END IF
		'Move to Z_start
		Ti = 9*DT '-3*DT for Trig "headroom"
		ZV = 0
		CALL PVTD(Zi,ZV,LZi,PumpA_pos,0,Ti)
		'PVT Z Zi,0 LZ LZi,0 PumpA PumpA_pos,0 TIME Ti 
		
		'wait until stroke is nearly complete before triggering Digital Oscilloscope
		N_sync = FLOOR(1000*Np_array(N_mode)*DT) - 107 - N_sync
		IF N_mode = 7 THEN
			N_sync = N_sync + 48
		END IF
		'REPEAT N_sync
		'	SYNC
		'ENDREPEAT
		DWELL N_sync/1000
			
		'Conditional trigger of Digital Oscilloscope
		IF IGLOBAL(1) = 1 THEN 'AND T_error < 1 THEN 
			SCOPETRIG
			DWELL 2/1000
			'SYNC
			'SYNC
			IGLOBAL(1) = 2
		END IF

		'CALL Print_Log()

	WEND

	'Orderly exit	
	Zi = 0
	ZV = 0
	LZi = 0
	PumpA_pos = 200*CEIL((PumpA_pos-0.01)/200)
	Ti = 2000*DT
	CALL PVTD(Zi,ZV,LZi,PumpA_pos,0,Ti)
	'PVT Z 0,0 LZ 0,0 PumpA PumpA_pos,0 TIME Ti
	START
	
END PROGRAM

FUNCTION PVTD(BYVAL Zi AS DOUBLE,BYVAL ZV AS DOUBLE,BYVAL LZi AS DOUBLE
			 ,BYVAL PumpA_pos AS DOUBLE, BYVAL Di AS INTEGER, BYVAL Ti AS DOUBLE)
	IF Pump_Enable = 1 THEN
		PVT Z Zi,ZV LZ LZi,0 PumpA PumpA_pos,0 DOUT X,0,Di TIME Ti
	ELSE
		PVT Z Zi,ZV LZ LZi,0 DOUT X,0,Di TIME Ti
	END IF
END FUNCTION

FUNCTION Trig()
	DIM N_temp AS INTEGER
	DIM i AS INTEGER
	DIM j AS INTEGER
	STARTSYNC 1
	'wait for next low-to-high transition
	i = 0
	Volt1 = AIN(X,1)
	DOUT X,0,2 'marks time when loop starts
	WHILE Volt1 < 0.6
		SYNC
		Volt1 = AIN(X,1)
		i = i + 1
	WEND
	N_loop = i
	SYNC 'This SYNC must precede DOUT, not follow, else program hangs
	DOUT X,0,1 'marks rising edge of 2-ms duration trigger pulse
	HALT
	'Calculate offset_Z from Volt1
	T_offset =   0.0443*Volt1^3
				-0.1750*Volt1^2
				+0.6463*Volt1
				-T_shift 'adding 0.25 starts motion 0.25 ms earlier
	SYNC 'need 4-ms delay before reading first bit of N_mode
	'Read 4 bits that define mode (every 3 ms)
	N_temp = 0
	FOR i = 0 TO 3	
		SYNC
		SYNC
		IF i = 0 THEN
			'AOUT X, 1:0.0 
			DOUT X,0,0
		ELSEIF i = 1 THEN
			DOUT X,0,1
		ELSEIF i = 2 THEN
			DOUT X,0,2
		ELSEIF i = 3 THEN
			DOUT X,0,3
		END IF
		SYNC
		IF (AIN(X,1) > 1.60) THEN 
			N_temp = N_temp + 2^i 
		END IF
	NEXT i
	
	N_mode = N_temp

	'Record Pump_Enable 3 ms later
	SYNC
	SYNC
	DOUT X,0,1
	Pump_Enable = 0 
	SYNC
	IF (AIN(X,1) > 1.60) THEN
		Pump_Enable = 1 
	END IF
	
	'Read 6 bits that define delay (every 3 ms)
	N_temp = 0
	FOR i = 0 TO 5	
		SYNC
		SYNC
		IF i = 0 THEN
			DOUT X,0,0
		ELSEIF i = 1 THEN
			DOUT X,0,1
		ELSEIF i = 2 THEN
			DOUT X,0,2
		ELSEIF i = 3 THEN
			DOUT X,0,3
		ELSEIF i = 4 THEN
			DOUT X,0,4
		ELSEIF i = 5 THEN
			DOUT X,0,5
		END IF
		SYNC
		IF (AIN(X,1) > 1.60) THEN 
			N_temp = N_temp + 2^i 
		END IF
	NEXT i
	N_delay = N_temp
	'35 ms from trigger detection to finish reading bit pattern
END FUNCTION

FUNCTION Print_Log()
	FORMAT PrintString, "%d,%d,%d,%d,%d,%.3f,%.3f,%.3f\r",
		INTV:N_trigger,
		INTV:N_loop,
		INTV:Pump_Enable,
		INTV:N_mode,
		INTV:N_delay,
		DBLV:Volt1,
		DBLV:T_offset,
		DBLV:T_error

	IF N_trigger = 0 THEN
		PrintString = "N_trigger, N_loop, Pump_Enable, N_Mode, N_delay, Volt1, T_offset[ms], T_error[mm]\r"
		PRINT PrintString
	ELSEIF
		(N_trigger > 1)
		AND ((N_mode <> N_mode_last)
		OR (Pump_Enable <> Pump_Enable_last)
		OR (IGLOBAL(3) = 1) 
		OR (T_error < -0.5)) THEN

		PRINT PrintString
		Pump_Enable_last = Pump_Enable
		N_mode_last = N_mode
		N_delay_last = N_delay
	END IF
	
	'Print 10000 entries before shutting down logging.
	IF N_trigger = 10000 THEN 
		IGLOBAL(3) = 0 
	END IF

END FUNCTION
